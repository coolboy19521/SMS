# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: mediapipe/modules/face_geometry/protos/mesh_3d.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n4mediapipe/modules/face_geometry/protos/mesh_3d.proto\x12\x17mediapipe.face_geometry\"\xf9\x01\n\x06Mesh3d\x12?\n\x0bvertex_type\x18\x01 \x01(\x0e\x32*.mediapipe.face_geometry.Mesh3d.VertexType\x12\x45\n\x0eprimitive_type\x18\x02 \x01(\x0e\x32-.mediapipe.face_geometry.Mesh3d.PrimitiveType\x12\x15\n\rvertex_buffer\x18\x03 \x03(\x02\x12\x14\n\x0cindex_buffer\x18\x04 \x03(\r\"\x1b\n\nVertexType\x12\r\n\tVERTEX_PT\x10\x00\"\x1d\n\rPrimitiveType\x12\x0c\n\x08TRIANGLE\x10\x00\x42\x38\n)com.google.mediapipe.modules.facegeometryB\x0bMesh3dProto')



_MESH3D = DESCRIPTOR.message_types_by_name['Mesh3d']
_MESH3D_VERTEXTYPE = _MESH3D.enum_types_by_name['VertexType']
_MESH3D_PRIMITIVETYPE = _MESH3D.enum_types_by_name['PrimitiveType']
Mesh3d = _reflection.GeneratedProtocolMessageType('Mesh3d', (_message.Message,), {
  'DESCRIPTOR' : _MESH3D,
  '__module__' : 'mediapipe.modules.face_geometry.protos.mesh_3d_pb2'
  # @@protoc_insertion_point(class_scope:mediapipe.face_geometry.Mesh3d)
  })
_sym_db.RegisterMessage(Mesh3d)

if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'\n)com.google.mediapipe.modules.facegeometryB\013Mesh3dProto'
  _MESH3D._serialized_start=82
  _MESH3D._serialized_end=331
  _MESH3D_VERTEXTYPE._serialized_start=273
  _MESH3D_VERTEXTYPE._serialized_end=300
  _MESH3D_PRIMITIVETYPE._serialized_start=302
  _MESH3D_PRIMITIVETYPE._serialized_end=331
# @@protoc_insertion_point(module_scope)
